Importing the Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Processing"""

# loading the csv data to a Pandas DataFrame for structured table
heart_data=pd.read_csv("/content/heart_disease_data.csv")

# print first 5 rows of the dataset
heart_data.head()

# Print last 5 rows of the Dataset
heart_data.tail()

# number of rows and columns in the dataset
heart_data.shape

# getting some info about the data
heart_data.info()

# checking for missing values
heart_data.isnull().sum()

# statistical measures about the data
heart_data.describe()

# checking the distribution of target variable
heart_data["target"].value_counts()

"""1 --> Defective Heart

2 --> Healthy Heart

Splitting the Features and Target
"""

X = heart_data.drop(columns="target",axis=1)
Y = heart_data["target"]

print(X)

print(Y)

"""Splitting the Data into Training Data and Test Data"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""Model Training

Logistic regression
"""

model = LogisticRegression()

# training the LogisticRegression model with Training data
model.fit(X_train.values,Y_train.values)

"""Model Evaluation

Accuracy Score
"""

# Accuracy on Training Data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)
print("Accuracy on Training Data:",training_data_accuracy)

# Accuracy on Test Data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction,Y_test)
print("Accuracy on Test Data:",test_data_accuracy)

"""Building a Predictive System"""

input_data = (57,1,0,130,131,0,1,115,1,1.2,1,1,3)

# change the input data to a numpy array from tuple datatype beacuse we need to do some processing like reshaping and it is easy to reshape a numpy array instead of a tuple
input_data_as_numpy_array = np.asarray(input_data)

# reshape the numpy array as we are predicting for only one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0] == 0):
  print("The Person does not have a Heart Disease")
else:
  print("The person has Heart Disease")
